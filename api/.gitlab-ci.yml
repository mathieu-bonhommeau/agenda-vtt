
.api-modules: &api-modules
  - cd api && npm install

api-lint:
  stage: validation
  allow_failure: true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always
    - when: never
  before_script:
    - *api-modules
  script:
    - npm run lint:backend

api-test:
  stage: test
  needs: [ ]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always
    - when: never
  before_script:
    - *api-modules
  script:
    - npm run test:backend

build-backend:
  image: node:20-alpine
  stage: build
  needs: [api-lint, api-test]
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always
    - when: never
  before_script:
    - *api-modules
  script:
    - npm run build:backend
  artifacts:
    paths:
      - api/dist/

deploy-api-production:
  image: docker:24.0.5
  stage: deploy
  environment:
    name: production
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    BACKEND_TAG: ${CI_REGISTRY_IMAGE}/api:${CI_ENVIRONMENT_NAME}
  needs: [build-backend]
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual
    - when: never
  before_script:
    - apk --update add nodejs npm
    - *api-modules
    - cd ..
    - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - touch .env
    - echo $ENV_PRODUCTION_BACK > .env
  script:
    - docker build --no-cache -f ./docker/api/api.dockerfile -t ${BACKEND_TAG} .
    - docker push ${BACKEND_TAG}

deploy-db-production:
  image: docker:24.0.5
  stage: deploy
  environment:
    name: production
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    DB_TAG: ${CI_REGISTRY_IMAGE}/db:${CI_ENVIRONMENT_NAME}
  needs: []
  rules:
    #- if: '$CI_COMMIT_BRANCH == "main"'
      #when: manual
    #- when: never
  before_script:
    - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - touch .env
    - echo $ENV_PRODUCTION_BACK > .env
  script:
    - |
      echo $POSTGRES_USER
      docker build \
      --build-arg POSTGRES_USER=${POSTGRES_USER} \
      --build-arg POSTGRES_PASSWORD=${POSTGRES_PASSWORD} \
      --build-arg POSTGRES_DB=${POSTGRES_DB} \
      --no-cache -f ./docker/db/db.dockerfile \
      -t ${DB_TAG} .
    - docker push ${DB_TAG}
